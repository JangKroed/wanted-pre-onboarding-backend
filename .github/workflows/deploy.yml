name: project-cicd

on:
  push:
    branches: ['main']

jobs:
  test:
    name: CI Pipeline
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [18.16.1]

    steps:
      - uses: actions/checkout@v3
      - name: Create env file
        run: |
          touch .env
          cat << EOF >> .env
          ${{ secrets.ENV }}

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Testing Packages
        run: npm install --save-dev jest node-mocks-http supertest

      - name: Test Database init
        run: export NODE_ENV=test && npm run db:migrate

      - name: Run Test
        run: npm run test

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-20.04

    needs: test

    steps:
      - uses: actions/checkout@v3
      - name: Create pem file
        run: |
          touch private-key.pem
          cat << EOF >> private-key.pem
          ${{ secrets.PRIVATE_KEY }}

      - name: Create env file
        run: |
          touch .env
          cat << EOF >> .env
          ${{ secrets.ENV }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/wanted_server_prac:$IMAGE_TAG .
          docker push $ECR_REGISTRY/wanted_server_prac:$IMAGE_TAG

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Deploy with Docker Compose
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # 배포할 이미지의 태그를 지정
        run: |
          docker-compose up -d

      - name: Copy Docker Compose file to EC2
        run: |
          chmod 400 private-key.pem
          scp -i private-key.pem -o StrictHostKeyChecking=no ./docker-compose.yml ubuntu@43.201.98.6:/home/ubuntu/

      - name: SSH into EC2 and deploy
        run: |
          chmod 400 private-key.pem
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@43.201.98.6 'cd /home/ubuntu/ && docker-compose up -d
